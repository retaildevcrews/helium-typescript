name: Docker Image Build

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

    paths-ignore:
      - 'docs/**'
      - '.devcontainer/**'
      - 'src/**/__tests__'
      - '**.md'

    tags:
      - v*


jobs:

  docker-build-push:

    runs-on: ubuntu-latest
    env:
      # copy the config value to environment variables
      # do not copy the actual secrets!

      KEYVAULT_NAME: ${{ secrets.KEYVAULT_NAME }}
      DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
      ACR_REPO: ${{ secrets.ACR_REPO }}
      ACR_IMAGE: ${{ secrets.ACR_IMAGE }}
      ACR_REG: ${{ secrets.ACR_REG }}

      # These are used in if: conditions
      AZURE_SET: false
      DOCKER_SET: false
      ACR_SET: false

    steps:
    - uses: actions/checkout@v2

    - name: Set conditions
      run: |
        # check that all Azure secrets are set
        if [[ "${{ secrets.SERVICE_PRINCIPAL_SECRET }}" != "" && "${{ secrets.TENANT }}" != "" && "${{ secrets.SERVICE_PRINCIPAL }}" != "" && "${{ secrets.KEYVAULT_NAME }}" != "" ]];
        then
          echo "::set-env name=AZURE_SET::true"
        fi

        # check that all Docker secrets are set
        if [[ "${{ secrets.DOCKER_PAT }}" != "" && "${{ secrets.DOCKER_REPO }}" != "" && "${{ secrets.DOCKER_USER }}" != "" ]];
        then
          echo "::set-env name=DOCKER_SET::true"
        fi
        
        # check that all ACR secrets are set
        if [[ "${{ secrets.ACR_REG }}" != "" && "${{ secrets.ACR_REPO }}" != "" && "${{ secrets.ACR_IMAGE }}" != "" ]];
        then
          echo "::set-env name=ACR_SET::true"
        fi

    - name: Validate Azure Access
      if: ${{ env.AZURE_SET == 'true' }}
      run: |
        # login to Azure
        az login --service-principal -u ${{ secrets.SERVICE_PRINCIPAL }} --tenant ${{ secrets.TENANT }} -p ${{ secrets.SERVICE_PRINCIPAL_SECRET }}

    - name: Docker Login
      if: ${{ env.DOCKER_SET == 'true' }}
      run: |
        # login to dockerhub
        echo "${{ secrets.DOCKER_PAT }}" | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin

    - name: Docker Pull
      if: ${{ env.AZURE_SET == 'true' || env.DOCKER_SET == 'true' || env.ACR_SET == 'true' }}
      run: |
        # Pull the latest image if needed
        # This doesn't have to be a separate step, but makes the output easier to read and debug
        docker pull node
        docker pull node:lts-alpine

    - name: Docker Build
      if: ${{ env.DOCKER_SET == 'true' || env.ACR_SET == 'true' }}
      run: |
        # build release image
        docker build . -t helium

    - name: Docker Tag and Push
      if: ${{ env.DOCKER_SET == 'true' }}
      run: |
        # tag the repo with :beta
        docker tag helium $DOCKER_REPO:beta

        # Tag image based on repo tag if a github label
        if [[ "${{ github.ref }}" == "refs/tags/"* ]]
        then

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,'  | sed -e 's/^v//')

          # tag the image with :version and :stable
          docker tag helium $DOCKER_REPO:$VERSION
          docker tag helium $DOCKER_REPO:stable
        fi

        # Push to the repo
        docker push $DOCKER_REPO
    
    - name: ACR Push
      if: ${{ env.ACR_SET == 'true' && env.AZURE_SET == 'true' }}
      run: |
        # login to acr
        az acr login -n ${ACR_REG}

        # build the complete image name
        ACR_IMAGE=$ACR_REG.azurecr.io/$ACR_REPO/$ACR_IMAGE

        # build release image
        docker tag helium $ACR_IMAGE:beta

        # Tag image based on repo tag if a github label
        if [[ "${{ github.ref }}" == "refs/tags/"* ]]
        then

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        
          # Strip "v" prefix from tag name
          VERSION=$(echo $VERSION | sed -e 's/^v//')
          
          # tag the image with :version and :stable
          docker tag helium $ACR_IMAGE:$VERSION
          docker tag helium $ACR_IMAGE:stable
        fi
        
        # push the repo
        docker push $ACR_IMAGE
